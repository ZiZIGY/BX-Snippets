{
  "Вызов аяксовых действий компонента битрикс": {
    "prefix": "BX.ajax.runComponentAction+",
    "body": [
      "/**",
      "    * This function makes an AJAX request to a component.",
      "    * @param {string} componentName - The name of the component. Example: 'mysitetemplate:mycomponent",
      "    * @param {string} action - The name of the function in ajax.php or class.php .",
      "    * @param {Object} [params] - The parameters for the request.",
      "    * @param {string} [params.mode] - The mode for the request. Can be either \"class\" or \"ajax\".",
      "    * @param {string} [params.method] - default POST",
      "    * @param {Object|FormData} [params.data] - The data for the request.",
      "    * @param {boolean} [params.json] - A flag indicating whether to send JSON data. In this case, when the request is sent, the Content-type header",
      "    * will be set to application/json, and the controllers will be able to access the original JSON, which will make it easier to work with numbers and empty values.",
      "    * @param {Object} [params.navigation] - The navigation data for the request.",
      "    * @param {string|Object} [params.analyticsLabel] - The analytics label for the request. It is used as a marker for analytics to indicate popular content.",
      "    * @param {string} [params.signedParameters] - The signed parameters for the request.",
      "    * @returns {Promise} - A promise that resolves with the response from the server.",
      "*/",
      "BX.ajax.runComponentAction('$componentName' , '$action', {",
      "    mode: '$mode',",
      "    data: $data,",
      "    json: $json,",
      "    navigation: $navigation,",
      "    analyticsLabel: $analysticsLabel,",
      "    signedParameters: $signedParameters",
      "})"
    ],
    "description": "Вызов аяксовых действий компонента битрикс из ajax.php или class.php в зависимости от параметров переданных в mode"
  },
  "Событие готовности DOMструктуры": {
    "prefix": "BX.ready+",
    "body": [
      "/** This function is called when the DOM is ready. */",
      "BX.ready(() => {",
      "    $1",
      "})"
    ],
    "description": "Событие готовности DOMструктуры"
  },
  "Получение DOM элемента по его ID": {
    "prefix": "BX+",
    "body": [
      "/**",
      " * Returns an element by its ID",
      " * @param {string} id - The ID of the element to be returned",
      " * @returns {HTMLElement} The element with the specified ID, or null if no element with the specified ID exists",
      " */",
      "$2BX('$id')"
    ],
    "description": "Получение DOM элемента по его ID"
  },
  "Функция позволяет получить текущее значение стиля property узла node или установить его в значение value. Свойство property указывается в CSS-нотации (например, 'margin-right')": {
    "prefix": "BX.style+",
    "body": [
      "/**",
      " * Sets a CSS style property for an element or get if the value is missing.",
      " * @param {HTMLElement} node - The element to modify.",
      " * @param {string} property - The name of the CSS style property.",
      " * @param {string} value - The value of the CSS style property.",
      " */",
      "BX.style($node, '$property', '$value')"
    ],
    "description": "Функция позволяет получить текущее значение стиля property узла node или установить его в значение value. Свойство property указывается в CSS-нотации (например, 'margin-right')"
  },
  "Метод который используется для отмены действия браузера по умолчанию, связанного с определенным событием.": {
    "prefix": "BX.PreventDefault+",
    "body": [
      "/**",
      " * Prevents the default action of an event from occurring.",
      " * @param {Event} e - The event object.",
      " */",
      "BX.PreventDefault($e)"
    ],
    "description": "Метод который используется для отмены действия браузера по умолчанию, связанного с определенным событием."
  },
  "Функция устанавливает функцию handler в качестве обработчика события event элемента el.": {
    "prefix": "BX.bind+",
    "body": [
      "/**",
      " * Binds an event handler to an element or a collection of elements.",
      " * @param {HTMLElement} el - The element to bind the event handler to.",
      " * @param {String} event - The name of the event to bind the handler to.",
      " * @param {Function} handler - The function to execute when the event is triggered.",
      " */",
      "BX.bind($node, '$event', $handler)"
    ],
    "description": "Функция устанавливает функцию handler в качестве обработчика события event элемента el."
  },
  "Создает пространство имен в глобальной объекте BX. Если пространство имен уже существует функция ничего не делает.": {
    "prefix": "BX.namespace+",
    "body": [
      "/**",
      " * Creates a namespace in the global BX object. If the namespace already exists, the function does nothing.",
      " * @param {string} namespace The name of the namespace, you can make a nested object if you write it through a dot",
      " * @returns {Object} The namespace object",
      " */",
      "BX.namespace($namespace)"
    ],
    "description": "Создает пространство имен в глобальной объекте BX. Если пространство имен уже существует функция ничего не делает."
  },
  "Функция снимает обработчик handler события event элемента el.": {
    "prefix": "BX.unbind+",
    "body": [
      "/**",
      " * Removes an event listener from an element or object.",
      " * @param {HTMLElement} node - The element to remove the listener from.",
      " * @param {string} eventName - The name of the event to remove the listener for.",
      " * @param {Function} [callback] - The function to remove as an event listener.",
      " */",
      "BX.unbind($node, '$eventName', $callback)"
    ],
    "description": "Функция снимает обработчик handler события event элемента el."
  },
  "Функция снимает все зарегистрированные обработчики событий с элемента el (или вообще все зарегистрированные обработчики событий, если параметр отсутствует).": {
    "prefix": "BX.unbindAll+",
    "body": [
      "/**",
      " * Unbinds all event handlers previously bound to an node",
      " * @param {HTMLElement} node - The node that was bound to the event",
      " * @param {string} [eventName] - The name of the event to unbind. If not specified, all events will be unbound.",
      " */",
      "BX.unbindAll($node, '$eventName')"
    ],
    "description": "Функция снимает все зарегистрированные обработчики событий с элемента el (или вообще все зарегистрированные обработчики событий, если параметр отсутствует)."
  },
  "Метод эмулирует событие на элементе DOM.": {
    "prefix": "BX.fireEvent+",
    "body": [
      "/**",
      " * The method emulates an event on the DOM element.",
      " * @param {HTMLElement} node The node on which to fire the event.",
      " * @param {string} eventName The name of the event to fire.",
      " */",
      "BX.fireEvent($node, '$eventName')"
    ],
    "description": "Метод эмулирует событие на элементе DOM."
  },
  "Функция устанавливает обработчик handler события eventName на дочерние элементы узла node, удовлетворяющих условиям isTarget. Нюансом метода является независимость от изменений содержимого node: физически обработчик вешается на сам узел node и принимает событие в момент его всплывания от дочерних элементов.": {
    "prefix": "BX.bindDelegate+",
    "body": [
      "/**",
      " * Binds an event handler to all nodes that match a specific selector and bubble up an event to the document.",
      " * @param {HTMLElement} node - The node to start searching from.",
      " * @param {string} eventName - The name of the event to listen for.",
      " * @param {Object} isTarget - An object that contains one or more properties that define which nodes match the selector.",
      " * @param {Function} handler - The function to execute when an event is triggered.",
      " * @returns {Function} A function that can be used to remove the event listener.",
      " */",
      "BX.bindDelegate($node, \"$eventName\", $isTarget, $handler)"
    ],
    "description": "Функция устанавливает обработчик handler события eventName на дочерние элементы узла node, удовлетворяющих условиям isTarget. Нюансом метода является независимость от изменений содержимого node: физически обработчик вешается на сам узел node и принимает событие в момент его всплывания от дочерних элементов."
  },
  "Обрабатывает HTML-код и извлекает скрипты и стили.": {
    "prefix": "BX.processHTML+",
    "body": [
      "/**",
      " * Processes HTML code and extracts scripts and styles.",
      " * @param {string} data HTML code.",
      " * @param {boolean} [scriptsRunFirst=false] Indicates whether scripts should be executed before or after the HTML code is inserted into the page.",
      " * @returns {{HTML: string, SCRIPT: Array, STYLE: Array}} An object containing the processed HTML code, scripts, and styles.",
      " */",
      "BX.processHTML($data, $true)"
    ],
    "description": "Обрабатывает HTML-код и извлекает скрипты и стили."
  },
  "Возвращает значение bitrix_sessid из файла cookie": {
    "prefix": "BX.bitrix_sessid+",
    "body": [
      "/**",
      " * Returns the value of the bitrix_sessid from cookie.",
      " * @return {string} The value of the bitrix_sessid cookie.",
      " */",
      "BX.bitrix_sessid()"
    ],
    "description": "Возвращает значение bitrix_sessid из файла cookie"
  },
  "Создает DocumentFragment из заданного массива узлов": {
    "prefix": "BX.createFragment+",
    "body": [
      "/**",
      " * Creates a DocumentFragment from the given array of nodes.",
      " * @param {Array} array - An array of HTMLElements to be added to the DocumentFragment.",
      " * @returns {DocumentFragment} A DocumentFragment object containing the given nodes.",
      " */",
      "BX.createFragment($array)"
    ],
    "description": "Создает DocumentFragment из заданного массива узлов"
  },
  "Отключает выделение текста для указанного узла": {
    "prefix": "BX.setUnselectable+",
    "body": [
      "/**",
      " * Disables text selection for the specified node.",
      " * @param {HTMLElement} node - The node to disable selection for.",
      " */",
      "BX.setUnselectable($node)"
    ],
    "description": "Отключает выделение текста для указанного узла"
  },
  "Включает выделение текста для указанного узла": {
    "prefix": "BX.setSelectable+",
    "body": [
      "/**",
      " * Enable text selection for the specified node.",
      " * @param {HTMLElement} node - The node to enable selection for.",
      " */",
      "BX.setSelectable($node)"
    ],
    "description": "Включает выделение текста для указанного узла"
  },
  " Фокусируется на указанном элементе": {
    "prefix": "BX.focus+",
    "body": [
      "/**",
      " * Focuses on the specified element.",
      " * @param {HTMLElement} node - The element to focus on.",
      " * @returns {boolean} - Returns true if the focus was set successfully, otherwise false.",
      " */",
      "BX.focus($node)"
    ],
    "description": " Фокусируется на указанном элементе"
  },
  "Возвращает первого ребенка родителя": {
    "prefix": "BX.firstChild+",
    "body": [
      "/**",
      " * Returns the first child of the given element.",
      " * @param {HTMLElement} node - The element whose first child is to be returned.",
      " * @returns {?HTMLElement} The first child of the given element, or null if the element has no children.",
      " */",
      "BX.firstChild($node)"
    ],
    "description": "Возвращает первого ребенка родителя"
  },
  "Возвращает последний элемент родителя": {
    "prefix": "BX.lastChild+",
    "body": [
      "/**",
      " * Returns the last child of the given element.",
      " * @param {HTMLElement} node - The element to search.",
      " * @returns {?HTMLElement} The last child of the element, or null if the element has no children.",
      " */",
      "BX.lastChild($node)"
    ],
    "description": "Возвращает последний элемент родителя"
  },
  "Возвращает предыдущий соседний элемент": {
    "prefix": "BX.previousSibling+",
    "body": [
      "/**",
      " * Returns the previous sibling of the specified element.",
      " * @param {HTMLElement} node - The element whose previous sibling is to be returned.",
      " * @returns {Element|null} The previous sibling of the specified element, or null if there is no previous sibling.",
      " */",
      "BX.previousSibling($node)"
    ],
    "description": "Возвращает предыдущий соседний элемент"
  },
  "Создание узла DOM-структуры. Допускает при создании узла подвеску на него каких-то событий.": {
    "prefix": "BX.create+",
    "body": [
      "/**",
      " * Creates and returns a new instance of the specified HTML element.",
      " * @param {string} tag - The tag name of the element to create.",
      " * @param {object} [options] - An object that contains one or more of the following properties:",
      " * @param {string} [options.tag] - The tag name of the element to create.",
      " * @param {object} [options.props] - An object that contains the element properties.",
      " * @param {object} [options.style] - An object that contains the element styles.",
      " * @param {object} [options.events] - An object that contains the event handlers for the element.",
      " * @param {object} [options.attrs] - An object that contains the element attributes.",
      " * @param {object} [options.dataset] - An object that contains list of data attributes.",
      " * @param {Array<HTMLElement>} [options.children] - An array of child elements.",
      " * @param {string} [options.text] - The text content of the element.",
      " * @param {HTMLElement|string} [options.html] - The HTML content of the element.",
      " * @param {?HTMLElement} context - The DOM context in which to create the element.",
      " * @returns {HTMLElement} The created element.",
      " */",
      "BX.create($tag, $options, $context)"
    ],
    "description": "Создание узла DOM-структуры. Допускает при создании узла подвеску на него каких-то событий."
  },
  "Вызов аяксовых действий компонента битрикс ": {
    "prefix": "BX.ajax.runComponentAction",
    "body": [
      "BX.ajax.runComponentAction('$componentName', '$action', {",
      "    mode: '$mode',",
      "    data: $data,",
      "    json: $json,",
      "    navigation: $navigation,",
      "    analyticsLabel: $analysticsLabel,",
      "    signedParameters: $signedParameters",
      "})"
    ],
    "description": "Вызов аяксовых действий компонента битрикс из ajax.php или class.php в зависимости от параметров переданных в mode"
  },
  "Событие готовности DOMструктуры ": {
    "prefix": "BX.ready",
    "body": ["BX.ready(() => {", "    $1", "})"],
    "description": "Событие готовности DOMструктуры"
  },
  "Получение DOM элемента по его ID ": {
    "prefix": "BX",
    "body": ["BX('$id')"],
    "description": "Получение DOM элемента по его ID"
  },
  "Функция позволяет получить текущее значение стиля property узла node или установить его в значение value. Свойство property указывается в CSS-нотации (например, 'margin-right') ": {
    "prefix": "BX.style",
    "body": ["BX.style($node, '$property', '$value')"],
    "description": "Функция позволяет получить текущее значение стиля property узла node или установить его в значение value. Свойство property указывается в CSS-нотации (например, 'margin-right')"
  },
  "Метод который используется для отмены действия браузера по умолчанию, связанного с определенным событием. ": {
    "prefix": "BX.PreventDefault",
    "body": ["BX.PreventDefault($e)"],
    "description": "Метод который используется для отмены действия браузера по умолчанию, связанного с определенным событием."
  },
  "Функция устанавливает функцию handler в качестве обработчика события event элемента el. ": {
    "prefix": "BX.bind",
    "body": ["BX.bind($node, '$event', $handler)"],
    "description": "Функция устанавливает функцию handler в качестве обработчика события event элемента el."
  },
  "Создает пространство имен в глобальной объекте BX. Если пространство имен уже существует функция ничего не делает. ": {
    "prefix": "BX.namespace",
    "body": ["BX.namespace($namespace)"],
    "description": "Создает пространство имен в глобальной объекте BX. Если пространство имен уже существует функция ничего не делает."
  },
  "Функция снимает обработчик handler события event элемента el. ": {
    "prefix": "BX.unbind",
    "body": ["BX.unbind($node, '$eventName', $callback)"],
    "description": "Функция снимает обработчик handler события event элемента el."
  },
  "Функция снимает все зарегистрированные обработчики событий с элемента el (или вообще все зарегистрированные обработчики событий, если параметр отсутствует). ": {
    "prefix": "BX.unbindAll",
    "body": ["BX.unbindAll($node, '$eventName')"],
    "description": "Функция снимает все зарегистрированные обработчики событий с элемента el (или вообще все зарегистрированные обработчики событий, если параметр отсутствует)."
  },
  "Метод эмулирует событие на элементе DOM. ": {
    "prefix": "BX.fireEvent",
    "body": ["BX.fireEvent($node, '$eventName')"],
    "description": "Метод эмулирует событие на элементе DOM."
  },
  "Функция устанавливает обработчик handler события eventName на дочерние элементы узла node, удовлетворяющих условиям isTarget. Нюансом метода является независимость от изменений содержимого node: физически обработчик вешается на сам узел node и принимает событие в момент его всплывания от дочерних элементов. ": {
    "prefix": "BX.bindDelegate",
    "body": ["BX.bindDelegate($node, \"$eventName\", $isTarget, $handler)"],
    "description": "Функция устанавливает обработчик handler события eventName на дочерние элементы узла node, удовлетворяющих условиям isTarget. Нюансом метода является независимость от изменений содержимого node: физически обработчик вешается на сам узел node и принимает событие в момент его всплывания от дочерних элементов."
  },
  "Обрабатывает HTML-код и извлекает скрипты и стили. ": {
    "prefix": "BX.processHTML",
    "body": ["BX.processHTML($data, $true)"],
    "description": "Обрабатывает HTML-код и извлекает скрипты и стили."
  },
  "Возвращает значение bitrix_sessid из файла cookie ": {
    "prefix": "BX.bitrix_sessid",
    "body": ["BX.bitrix_sessid()"],
    "description": "Возвращает значение bitrix_sessid из файла cookie"
  },
  "Создает DocumentFragment из заданного массива узлов ": {
    "prefix": "BX.createFragment",
    "body": ["BX.createFragment($array)"],
    "description": "Создает DocumentFragment из заданного массива узлов"
  },
  "Отключает выделение текста для указанного узла ": {
    "prefix": "BX.setUnselectable",
    "body": ["BX.setUnselectable($node)"],
    "description": "Отключает выделение текста для указанного узла"
  },
  "Включает выделение текста для указанного узла ": {
    "prefix": "BX.setSelectable",
    "body": ["BX.setSelectable($node)"],
    "description": "Включает выделение текста для указанного узла"
  },
  " Фокусируется на указанном элементе ": {
    "prefix": "BX.focus",
    "body": ["BX.focus($node)"],
    "description": " Фокусируется на указанном элементе"
  },
  "Возвращает первого ребенка родителя ": {
    "prefix": "BX.firstChild",
    "body": ["BX.firstChild($node)"],
    "description": "Возвращает первого ребенка родителя"
  },
  "Возвращает последний элемент родителя ": {
    "prefix": "BX.lastChild",
    "body": ["BX.lastChild($node)"],
    "description": "Возвращает последний элемент родителя"
  },
  "Возвращает предыдущий соседний элемент ": {
    "prefix": "BX.previousSibling",
    "body": ["BX.previousSibling($node)"],
    "description": "Возвращает предыдущий соседний элемент"
  },
  "Создание узла DOM-структуры. Допускает при создании узла подвеску на него каких-то событий. ": {
    "prefix": "BX.create",
    "body": ["BX.create($tag, $options, $context)"],
    "description": "Создание узла DOM-структуры. Допускает при создании узла подвеску на него каких-то событий."
  },
  "Устанавливает прозрачность элемента.": {
    "prefix": "BX.setOpacity+",
    "body": [
      "/**",
      " * Sets the opacity of an element.",
      " * @param {HTMLElement} node -  The element to modify.",
      " * @param {number} opacity - The opacity value, between 0 and 1.",
      " */",
      "BX.setOpacity($node, $opacity)"
    ],
    "description": "Устанавливает прозрачность элемента."
  },
  "Устанавливает прозрачность элемента. ": {
    "prefix": "BX.setOpacity",
    "body": ["BX.setOpacity($node, $opacity)"],
    "description": "Устанавливает прозрачность элемента."
  },
  "Возвращает следующий родственный элемент указанного элемента или null, если следующего родственного элемента нет.": {
    "prefix": "BX.nextSibling+",
    "body": [
      "/**",
      " * Returns the next sibling of the specified element, or null if there is no next sibling.",
      " * @param {HTMLElement} $node - The element whose next sibling is to be retrieved.",
      " * @returns {HTMLElement|null} The next sibling of the specified element, or null if there is no next sibling.",
      " */",
      "BX.nextSibling($node)"
    ],
    "description": "Возвращает следующий родственный элемент указанного элемента или null, если следующего родственного элемента нет."
  },
  "Возвращает следующий родственный элемент указанного элемента или null, если следующего родственного элемента нет. ": {
    "prefix": "BX.nextSibling",
    "body": ["BX.nextSibling($node)"],
    "description": "Возвращает следующий родственный элемент указанного элемента или null, если следующего родственного элемента нет."
  },
  "Возвращает false": {
    "prefix": "BX.false+",
    "body": [
      "/**",
      " * Returns false.",
      " * @returns {boolean} false.",
      " */",
      "BX.False()"
    ],
    "description": "Возвращает false"
  },
  "Возвращает false ": {
    "prefix": "BX.false",
    "body": ["BX.False()"],
    "description": "Возвращает false"
  },
  "Показывает элемент.": {
    "prefix": "BX.show+",
    "body": [
      "/**",
      " * Shows or hides an element.",
      " * @param {HTMLElement} node - The element to show or hide.",
      " */",
      "BX.show($node)"
    ],
    "description": "Показывает элемент"
  },
  "Показывает элемент. ": {
    "prefix": "BX.show",
    "body": ["BX.show($node)"],
    "description": "Показывает элемент"
  },
  "Скрывает элемент.": {
    "prefix": "BX.hide+",
    "body": [
      "/**",
      " * Hides an element.",
      " * @param {HTMLElement} node - The element to hide.",
      " */",
      "BX.hide($node)"
    ],
    "description": "Скрывает элемент"
  },
  "Скрывает элемент. ": {
    "prefix": "BX.hide",
    "body": ["BX.hide($node)"],
    "description": "Скрывает элемент"
  },
  "Переключает видимость элемента.": {
    "prefix": "BX.toggle+",
    "body": [
      "/**",
      " * Toggle element display.",
      " * @param {HTMLElement} node - The element to toggle.",
      " */",
      "BX.toggle($node)"
    ],
    "description": "Переключает видимость элемента"
  },
  "Переключает видимость элемента. ": {
    "prefix": "BX.toggle",
    "body": ["BX.toggle($node)"],
    "description": "Переключает видимость элемента"
  },
  "Очищает содержимое элемента.": {
    "prefix": "BX.cleanNode+",
    "body": [
      "/**",
      " * Cleans the specified node and its descendants.",
      " * @param {HTMLElement} node - The node to clean.",
      " * @param {boolean} [removeSelf=false] - Indicates whether to remove the node itself.",
      " */",
      "BX.cleanNode($node, $false)"
    ],
    "description": "Очищает содержимое элемента"
  },
  "Очищает содержимое элемента. ": {
    "prefix": "BX.cleanNode",
    "body": ["BX.cleanNode($node, $false)"],
    "description": "Очищает содержимое элемента"
  },
  "Добавляет класс элементу.": {
    "prefix": "BX.addClass+",
    "body": [
      "/**",
      " * Adds a class to the specified element.",
      " * @param {HTMLElement} node - The element to which the class is to be added.",
      " * @param {string} className - The name of the class to be added.",
      " */",
      "BX.addClass($node, $className)"
    ],
    "description": "Добавляет класс элементу"
  },
  "Добавляет класс элементу. ": {
    "prefix": "BX.addClass",
    "body": ["BX.addClass($node, $className)"],
    "description": "Добавляет класс элементу"
  },
  "Удаляет класс у элемента.": {
    "prefix": "BX.removeClass+",
    "body": [
      "/**",
      " * Removes a class from the specified element.",
      " * @param {HTMLElement} node - The element to which the class is to be removed.",
      " * @param {string} className - The name of the class to remove.",
      " */",
      "BX.removeClass($node, $className)"
    ],
    "description": "Удаляет класс у элемента"
  },
  "Удаляет класс у элемента. ": {
    "prefix": "BX.removeClass",
    "body": ["BX.removeClass($node, $className)"],
    "description": "Удаляет класс у элемента"
  },
  "Проверяет если ли класс у выбранного элемента.": {
    "prefix": "BX.hasClass+",
    "body": [
      "/**",
      " * Returns whether the specified node has the specified class.",
      " * @param {HTMLElement} node - The node to check.",
      " * @param {string} className - The class name to check for.",
      " * @returns {boolean} `true` if the node has the specified class, `false` otherwise.",
      " */",
      "BX.hasClass($node, $className)"
    ],
    "description": "Проверяет если ли класс у выбранного элемента"
  },
  "Проверяет если ли класс у выбранного элемента. ": {
    "prefix": "BX.hasClass",
    "body": ["BX.hasClass($node, $className)"],
    "description": "Проверяет если ли класс у выбранного элемента"
  },
  "Удаляет элемент из DOM дерева.": {
    "prefix": "BX.remove+",
    "body": [
      "/**",
      " * Removes the specified node from the DOM tree.",
      " * @param {HTMLElement} node The node to remove.",
      " */",
      "BX.remove($node)"
    ],
    "description": "Удаляет элемент из DOM дерева."
  },
  "Удаляет элемент из DOM дерева. ": {
    "prefix": "BX.remove",
    "body": ["BX.remove($node)"],
    "description": "Удаляет элемент из DOM дерева."
  },
  "Проверяет скрыт ли элемент.": {
    "prefix": "BX.isNodeHidden+",
    "body": [
      "/**",
      " * Checks if the specified node is hidden.",
      " * @param {HTMLElement} node The node to check.",
      " * @returns {boolean} `true` if the node is hidden, `false` otherwise.",
      " */",
      "BX.isNodeHidden($node)"
    ],
    "description": "Проверяет скрыт ли элемент."
  },
  "Проверяет скрыт ли элемент. ": {
    "prefix": "BX.isNodeHidden",
    "body": ["BX.isNodeHidden($node)"],
    "description": "Проверяет скрыт ли элемент."
  },
  "Скролит экран до элемента.": {
    "prefix": "BX.scrollToNode+",
    "body": [
      "/**",
      " * Scrolls the page to make the specified DOM node visible.",
      " * @param {HTMLElement} node - The element to scroll to.",
      " */",
      "BX.scrollToNode($node)"
    ],
    "description": "Скролит экран до элемента"
  },
  "Скролит экран до элемента. ": {
    "prefix": "BX.scrollToNode",
    "body": ["BX.scrollToNode($node)"],
    "description": "Скролит экран до элемента"
  },
  "Возвращает или задает высоту элемента.": {
    "prefix": "BX.height+",
    "body": [
      "/**,",
      " * Sets height for an element or get if the value is missing.,",
      " * @param {HTMLElement} node - The element to modify.,",
      " * @param {number} value - The value of the height.,",
      " */",
      "BX.height($node, $value)"
    ],
    "description": "Возвращает или задает высоту элемента"
  },
  "Возвращает или задает высоту элемента. ": {
    "prefix": "BX.height",
    "body": ["BX.height($node, $value)"],
    "description": "Возвращает или задает высоту элемента"
  },
  "Возвращает или задает ширину элемента.": {
    "prefix": "BX.width+",
    "body": [
      "/**,",
      " * Sets width for an element or get if the value is missing.,",
      " * @param {HTMLElement} node - The element to modify.,",
      " * @param {number} value - The value of the width.,",
      " */",
      "BX.width($node, $value)"
    ],
    "description": "Возвращает или задает ширину элемента"
  },
  "Возвращает или задает ширину элемента. ": {
    "prefix": "BX.width",
    "body": ["BX.width($node, $value)"],
    "description": "Возвращает или задает ширину элемента"
  },
  "Получение абсолютной позиции элемента на экране.": {
    "prefix": "BX.pos+",
    "body": [
      "/**",
      " * Positions the given DOMNode relative to another DOMNode.",
      " *",
      " * @param {DOMNode} node - The DOMNode to be positioned.",
      " * @param {boolean} bRelative - A boolean value indicating whether the positioning is relative.",
      " */",
      "BX.pos($node, $bRelative)"
    ],
    "description": "Получение абсолютной позиции элемента на экране."
  },
  "Получение абсолютной позиции элемента на экране. ": {
    "prefix": "BX.pos",
    "body": ["BX.pos($node, $bRelative)"],
    "description": "Получение абсолютной позиции элемента на экране."
  },
  "Является ли аргумент строкой.": {
    "prefix": "BX.type.isString+",
    "body": [
      "/**",
      " * Checks if the given value is a string.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a string, false otherwise.",
      " */",
      "BX.type.isString($value)"
    ],
    "description": "Является ли аргумент строкой."
  },
  "Является ли аргумент строкой. ": {
    "prefix": "BX.type.isString",
    "body": ["BX.type.isString($value)"],
    "description": "Является ли аргумент строкой."
  },
  "Является ли аргумент непустой строкой.": {
    "prefix": "BX.type.isNotEmptyString+",
    "body": [
      "/**",
      " * Checks if the given string is not empty.",
      " *",
      " * @param {*} value The string to check.",
      " * @returns {boolean} True if the string is not empty, false otherwise.",
      " */",
      "BX.type.isNotEmptyString($value)"
    ],
    "description": "Является ли аргумент непустой строкой."
  },
  "Является ли аргумент непустой строкой. ": {
    "prefix": "BX.type.isNotEmptyString",
    "body": ["BX.type.isNotEmptyString($value)"],
    "description": "Является ли аргумент непустой строкой."
  },
  "Является ли аргумент булевой переменной.": {
    "prefix": "BX.type.isBoolean+",
    "body": [
      " /**",
      " * Checks if the given value is a boolean.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a boolean, false otherwise.",
      " */",
      "BX.type.isBoolean($value)"
    ],
    "description": "Является ли аргумент булевой переменной."
  },
  "Является ли аргумент булевой переменной. ": {
    "prefix": "BX.type.isBoolean",
    "body": ["BX.type.isBoolean($value)"],
    "description": "Является ли аргумент булевой переменной."
  },
  "Является ли аргумент числом.": {
    "prefix": "BX.type.isNumber+",
    "body": [
      "/**",
      " * Checks if the given value is a number.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a number, false otherwise.",
      " */",
      "BX.type.isNumber($value)"
    ],
    "description": "Является ли аргумент числом."
  },
  "Является ли аргумент числом. ": {
    "prefix": "BX.type.isNumber",
    "body": ["BX.type.isNumber($value)"],
    "description": "Является ли аргумент числом."
  },
  "Является ли аргумент функцией.": {
    "prefix": "BX.type.isFunction+",
    "body": [
      "/**",
      " * Checks if the given value is a function.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a function, false otherwise.",
      " */",
      "BX.type.isFunction($value)"
    ],
    "description": "Является ли аргумент функцией."
  },
  "Является ли аргумент функцией": {
    "prefix": "BX.type.isFunction",
    "body": ["BX.type.isFunction($value)"],
    "description": "Является ли аргумент функцией."
  },
  "Является ли аргумент узлом DOM-структуры.": {
    "prefix": "BX.type.isDomNode+",
    "body": [
      "/**",
      " * Checks if the given value is a DOM node.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a DOM node, false otherwise.",
      " */",
      "BX.type.isDomNode($value)"
    ],
    "description": "Является ли аргумент узлом DOM-структуры."
  },
  "Является ли аргумент узлом DOM-структуры. ": {
    "prefix": "BX.type.isDomNode",
    "body": ["BX.type.isDomNode($value)"],
    "description": "Является ли аргумент узлом DOM-структуры."
  },
  "Является ли аргумент элементом DOM-структуры (например, не document).": {
    "prefix": "BX.type.isElementNode+",
    "body": [
      "/**",
      " * Checks if the given value is an element node.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is an element node, false otherwise.",
      " */",
      "BX.type.isElementNode($value)"
    ],
    "description": "Является ли аргумент элементом DOM-структуры (например, не document)."
  },
  "Является ли аргумент элементом DOM-структуры (например, не document). ": {
    "prefix": "BX.type.isElementNode",
    "body": ["BX.type.isElementNode($value)"],
    "description": "Является ли аргумент элементом DOM-структуры (например, не document)."
  },
  "Является ли аргумент массивом.": {
    "prefix": "BX.type.isArray+",
    "body": [
      "/**",
      " * Checks if the given value is an array.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is an array, false otherwise.",
      " */",
      "BX.type.isArray($value)"
    ],
    "description": "Является ли аргумент массивом."
  },
  "Является ли аргумент массивом. ": {
    "prefix": "BX.type.isArray",
    "body": ["BX.type.isArray($value)"],
    "description": "Является ли аргумент массивом."
  },
  "Является ли аргумент экземпляром класса Date.": {
    "prefix": "BX.type.isDate+",
    "body": [
      "/**",
      " * Checks if the given value is a Date object.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a Date object, false otherwise.",
      " */",
      "BX.type.isDate($value)"
    ],
    "description": "Является ли аргумент экземпляром класса Date."
  },
  "Является ли аргумент экземпляром класса Date. ": {
    "prefix": "BX.type.isDate",
    "body": ["BX.type.isDate($value)"],
    "description": "Является ли аргумент экземпляром класса Date."
  },
  "Является ли аргумент заполненной строкой.": {
    "prefix": "BX.type.isStringFilled+",
    "body": [
      "/**",
      " * Checks if the provided value is a filled string.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a filled string, false otherwise.",
      " */",
      "BX.type.isStringFilled($value)"
    ],
    "description": "Является ли аргумент заполненной строкой."
  },
  "Является ли аргумент заполненной строкой. ": {
    "prefix": "BX.type.isStringFilled",
    "body": ["BX.type.isStringFilled($value)"],
    "description": "Является ли аргумент заполненной строкой."
  },
  "Является ли аргумент объектом.": {
    "prefix": "BX.type.isObject+",
    "body": [
      "/**",
      " * Checks if the provided value is an object.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is an object, false otherwise.",
      " */",
      "BX.type.isObject($value)"
    ],
    "description": "Является ли аргумент объектом."
  },
  "Является ли аргумент объектом. ": {
    "prefix": "BX.type.isObject",
    "body": ["BX.type.isObject($value)"],
    "description": "Является ли аргумент объектом."
  },
  "Проверяет, является ли предоставленное значение объектно-подобным.": {
    "prefix": "BX.type.isObject+",
    "body": [
      "/**",
      " * Checks if the provided value is an object.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is an object, false otherwise.",
      " */",
      "BX.type.isObject($value)"
    ],
    "description": "Проверяет, является ли предоставленное значение объектно-подобным."
  },
  "Проверяет, является ли предоставленное значение объектно-подобным. ": {
    "prefix": "BX.type.isObject",
    "body": ["BX.type.isObject($value)"],
    "description": "Проверяет, является ли предоставленное значение объектно-подобным."
  },
  "Проверяет, является ли предоставленное значение простым объектом.": {
    "prefix": "BX.type.isPlainObject+",
    "body": [
      "/**",
      " * Checks if the provided value is a plain object.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a plain object, false otherwise.",
      " */",
      "BX.type.isPlainObject($value)"
    ],
    "description": "Проверяет, является ли предоставленное значение простым объектом."
  },
  "Проверяет, является ли предоставленное значение простым объектом. ": {
    "prefix": "BX.type.isPlainObject",
    "body": ["BX.type.isPlainObject($value)"],
    "description": "Проверяет, является ли предоставленное значение простым объектом."
  },
  "Проверяет, является ли указанное значение целым числом.": {
    "prefix": "BX.type.isInteger+",
    "body": [
      "/**",
      " * Checks if the provided value is an integer.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is an integer, false otherwise.",
      " */",
      "BX.type.isInteger($value)"
    ],
    "description": "Проверяет, является ли указанное значение целым числом."
  },
  "Проверяет, является ли указанное значение целым числом. ": {
    "prefix": "BX.type.isInteger",
    "body": ["BX.type.isInteger($value)"],
    "description": "Проверяет, является ли указанное значение целым числом."
  },
  "Проверяет, является ли указанное значение плавающим.": {
    "prefix": "BX.type.isFloat+",
    "body": [
      "/**",
      " * Checks if the provided value is a float.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a float, false otherwise.",
      " */",
      "BX.type.isFloat($value)"
    ],
    "description": "Проверяет, является ли указанное значение плавающим."
  },
  "Проверяет, является ли указанное значение плавающим. ": {
    "prefix": "BX.type.isFloat",
    "body": ["BX.type.isFloat($value)"],
    "description": "Проверяет, является ли указанное значение плавающим."
  },
  "Проверяет, равно ли указанное значение нулю.": {
    "prefix": "BX.type.isNil+",
    "body": [
      "/**",
      " * Checks if the provided value is nil.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is nil, false otherwise.",
      " */",
      "BX.type.isNil($value)"
    ],
    "description": "Проверяет, равно ли указанное значение нулю."
  },
  "Проверяет, равно ли указанное значение нулю. ": {
    "prefix": "BX.type.isNil",
    "body": ["BX.type.isNil($value)"],
    "description": "Проверяет, равно ли указанное значение нулю."
  },
  "Проверяет, является ли указанное значение заполненным массивом.": {
    "prefix": "BX.type.isArrayFilled+",
    "body": [
      "/**",
      " * Checks if the provided value is an array filled.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is an array filled, false otherwise.",
      " */",
      "BX.type.isArrayFilled($value)"
    ],
    "description": "Проверяет, является ли указанное значение заполненным массивом."
  },
  "Проверяет, является ли указанное значение заполненным массивом. ": {
    "prefix": "BX.type.isArrayFilled",
    "body": ["BX.type.isArrayFilled($value)"],
    "description": "Проверяет, является ли указанное значение заполненным массивом."
  },
  "Проверяет, является ли предоставленное значение похожим на массив.": {
    "prefix": "BX.type.isArrayLike+",
    "body": [
      "/**",
      " * Checks if the provided value is an array-like.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is an array-like, false otherwise.",
      " */",
      "BX.type.isArrayLike($value)"
    ],
    "description": "Проверяет, является ли предоставленное значение похожим на массив."
  },
  "Проверяет, является ли предоставленное значение похожим на массив. ": {
    "prefix": "BX.type.isArrayLike",
    "body": ["BX.type.isArrayLike($value)"],
    "description": "Проверяет, является ли предоставленное значение похожим на массив."
  },
  "Проверяет, является ли указанное значение текстовым узлом.": {
    "prefix": "BX.type.isTextNode+",
    "body": [
      "/**",
      " * Checks if the provided value is a text node.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a text node, false otherwise.",
      " */",
      "BX.type.isTextNode($value)"
    ],
    "description": "Проверяет, является ли указанное значение текстовым узлом."
  },
  "Проверяет, является ли указанное значение текстовым узлом. ": {
    "prefix": "BX.type.isTextNode",
    "body": ["BX.type.isTextNode($value)"],
    "description": "Проверяет, является ли указанное значение текстовым узлом."
  },
  "Проверяет, является ли значение - Map.": {
    "prefix": "BX.type.isMap+",
    "body": [
      "/**",
      " * Checks if the provided value is a map.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a map, false otherwise.",
      " */",
      "BX.type.isMap($value)"
    ],
    "description": "Проверяет, является ли значение - Map."
  },
  "Проверяет, является ли значение - Map. ": {
    "prefix": "BX.type.isMap",
    "body": ["BX.type.isMap($value)"],
    "description": "Проверяет, является ли значение - Map."
  },
  "Проверяет, является ли указанное значение - Set.": {
    "prefix": "BX.type.isSet+",
    "body": [
      "/**",
      " * Checks if the provided value is a set.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a set, false otherwise.",
      " */",
      "BX.type.isSet($value)"
    ],
    "description": "Проверяет, является ли указанное значение - Set."
  },
  "Проверяет, является ли указанное значение - Set. ": {
    "prefix": "BX.type.isSet",
    "body": ["BX.type.isSet($value)"],
    "description": "Проверяет, является ли указанное значение - Set."
  },
  "Проверяет, является ли указанное значение - weakMap.": {
    "prefix": "BX.type.isWeakMap+",
    "body": [
      "/**",
      " * Checks if the provided value is a weak map.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a weak map, false otherwise.",
      " */",
      "BX.type.isWeakMap($value)"
    ],
    "description": "Проверяет, является ли указанное значение - weakMap."
  },
  "Проверяет, является ли указанное значение - weakMap. ": {
    "prefix": "BX.type.isWeakMap",
    "body": ["BX.type.isWeakMap($value)"],
    "description": "Проверяет, является ли указанное значение - weakMap."
  },
  "Проверяет, является ли указанное значение - weakSet.": {
    "prefix": "BX.type.isWeakSet+",
    "body": [
      "/**",
      " * Checks if the provided value is a weak set.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a weak set, false otherwise.",
      " */",
      "BX.type.isWeakSet($value)"
    ],
    "description": "Проверяет, является ли указанное значение - weakSet."
  },
  "Проверяет, является ли указанное значение - weakSet. ": {
    "prefix": "BX.type.isWeakSet",
    "body": ["BX.type.isWeakSet($value)"],
    "description": "Проверяет, является ли указанное значение - weakSet."
  },
  "Проверяет, является ли предоставленное значение прототипом.": {
    "prefix": "BX.type.isPrototype+",
    "body": [
      "/**",
      " * Checks if the provided value is a prototype.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a prototype, false otherwise.",
      " */",
      "BX.type.isPrototype($value)"
    ],
    "description": "Проверяет, является ли предоставленное значение прототипом."
  },
  "Проверяет, является ли предоставленное значение прототипом. ": {
    "prefix": "BX.type.isPrototype",
    "body": ["BX.type.isPrototype($value)"],
    "description": "Проверяет, является ли предоставленное значение прототипом."
  },
  "Проверяет, является ли указанное значение регулярным выражением.": {
    "prefix": "BX.type.isRegExp+",
    "body": [
      "/**",
      " * Checks if the provided value is a regular expression.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a regular expression, false otherwise.",
      " */",
      "BX.type.isRegExp($value)"
    ],
    "description": "Проверяет, является ли указанное значение регулярным выражением."
  },
  "Проверяет, является ли указанное значение регулярным выражением. ": {
    "prefix": "BX.type.isRegExp",
    "body": ["BX.type.isRegExp($value)"],
    "description": "Проверяет, является ли указанное значение регулярным выражением."
  },
  "Проверяет, является ли указанное значение Null.": {
    "prefix": "BX.type.isNull+",
    "body": [
      "/**",
      " * Checks if the provided value is null.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is null, false otherwise.",
      " */",
      "BX.type.isNull($value)"
    ],
    "description": "Проверяет, является ли указанное значение Null."
  },
  "Проверяет, является ли указанное значение Null. ": {
    "prefix": "BX.type.isNull",
    "body": ["BX.type.isNull($value)"],
    "description": "Проверяет, является ли указанное значение Null."
  },
  "Проверяет, является ли указанное значение undefined.": {
    "prefix": "BX.type.isUndefined+",
    "body": [
      "/**",
      " * Checks if the provided value is undefined.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is undefined, false otherwise.",
      " */",
      "BX.type.isUndefined($value)"
    ],
    "description": "Проверяет, является ли указанное значение undefined."
  },
  "Проверяет, является ли указанное значение undefined. ": {
    "prefix": "BX.type.isUndefined",
    "body": ["BX.type.isUndefined($value)"],
    "description": "Проверяет, является ли указанное значение undefined."
  },
  "Проверяет, является ли указанное значение arrayBuffer.": {
    "prefix": "BX.type.isArrayBuffer+",
    "body": [
      "/**",
      " * Checks if the provided value is an array buffer.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is an array buffer, false otherwise.",
      " */",
      "BX.type.isArrayBuffer($value)"
    ],
    "description": "Проверяет, является ли указанное значение arrayBuffer."
  },
  "Проверяет, является ли указанное значение arrayBuffer. ": {
    "prefix": "BX.type.isArrayBuffer",
    "body": ["BX.type.isArrayBuffer($value)"],
    "description": "Проверяет, является ли указанное значение arrayBuffer."
  },
  "Проверяет, является ли указанное значение - blob.": {
    "prefix": "BX.type.isBlob+",
    "body": [
      "/**",
      " * Checks if the provided value is a blob.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a blob, false otherwise.",
      " */",
      "BX.type.isBlob($value)"
    ],
    "description": "Проверяет, является ли указанное значение - blob."
  },
  "Проверяет, является ли указанное значение - blob. ": {
    "prefix": "BX.type.isBlob",
    "body": ["BX.type.isBlob($value)"],
    "description": "Проверяет, является ли указанное значение - blob."
  },
  "Проверяет, является ли указанное значение - файлом.": {
    "prefix": "BX.type.isFile+",
    "body": [
      "/**",
      " * Checks if the provided value is a file.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a file, false otherwise.",
      " */",
      "BX.type.isFile($value)"
    ],
    "description": "Проверяет, является ли указанное значение - файлом."
  },
  "Проверяет, является ли указанное значение - файлом. ": {
    "prefix": "BX.type.isFile",
    "body": ["BX.type.isFile($value)"],
    "description": "Проверяет, является ли указанное значение - файлом."
  },
  "Проверяет, является ли указанное значение - FormData.": {
    "prefix": "BX.type.isFormData+",
    "body": [
      "/**",
      " * Checks if the provided value is a form data.",
      " *",
      " * @param {*} value The value to check.",
      " * @returns {boolean} True if the value is a form data, false otherwise.",
      " */",
      "BX.type.isFormData($value)"
    ],
    "description": "Проверяет, является ли указанное значение - FormData."
  },
  "Проверяет, является ли указанное значение - FormData. ": {
    "prefix": "BX.type.isFormData",
    "body": ["BX.type.isFormData($value)"],
    "description": "Проверяет, является ли указанное значение - FormData."
  },
  "Настраивает узел DOM, применяя предоставленные свойства, стиль, события, атрибуты, дочерние элементы, текст или HTML.": {
    "prefix": "BX.adjust+",
    "body": [
      "/**",
      " * Adjusts a DOMNode by applying the provided properties, style, events, attributes, children, text, or HTML.",
      " *",
      " * @param {HTMLElement} node - The DOMNode to be adjusted.",
      " * @param {Object} options - An object containing the following properties:",
      " * @param {HTMLElement} [options.node] - The node to be adjusted. Defaults to the provided DOMNode.",
      " * @param {Object} [options.props] - An object containing properties to be applied to the node.",
      " * @param {Object} [options.style] - An object containing style properties to be applied to the node.",
      " * @param {Object} [options.events] - An object containing event listeners to be added to the node.",
      " * @param {Object} [options.attrs] - An object containing attributes to be applied to the node.",
      " * @param {Array<HTMLElement>} [options.children] - An array of child nodes to be added to the node.",
      " * @param {String} [options.text] - The text content to be set on the node.",
      " * @param {String} [options.html] - The HTML content to be set on the node.",
      " *",
      " * @returns {DOMNode} The adjusted DOMNode.",
      " */",
      "BX.adjust($node, $options)"
    ],
    "description": "Настраивает узел DOM, применяя предоставленные свойства, стиль, события, атрибуты, дочерние элементы, текст или HTML."
  },
  "Настраивает узел DOM, применяя предоставленные свойства, стиль, события, атрибуты, дочерние элементы, текст или HTML. ": {
    "prefix": "BX.adjust",
    "body": ["BX.adjust($node, $options)"],
    "description": "Настраивает узел DOM, применяя предоставленные свойства, стиль, события, атрибуты, дочерние элементы, текст или HTML."
  },
  "Находит дочерний узел указанного DOM-узла на основе предоставленных параметров.": {
    "prefix": "BX.findChild+",
    "body": [
      "/**",
      " * Finds a child node of the specified DOMNode based on the provided parameters.",
      " *",
      " * @param {HTMLElement} node - The parent DOMNode to search for a child node.",
      " * @param {Object} [params] - An optional object containing parameters to filter the child nodes.",
      " * @param {string} [params.tagName] - The tag name of the desired child node.",
      " * @param {string} [params.className] - The class name of the desired child node.",
      " * @param {Object} [params.attribute] - An object containing attribute key-value pairs to filter the child nodes.",
      " * @param {Object} [params.property] - An object containing property key-value pairs to filter the child nodes.",
      " * @param {boolean} [recursive=false] - A boolean value indicating whether to search recursively through child nodes.",
      " * @param {boolean} [get_all=false] - A boolean value indicating whether to return all matching child nodes or just the first one.",
      " * @returns {HTMLElement|Array<HTMLElement>} - The found child node or an array of all matching child nodes.",
      " */",
      "BX.findChild($node, $params, $recursive $get_all)"
    ],
    "description": "Находит дочерний узел указанного DOM-узла на основе предоставленных параметров."
  },
  "Находит дочерний узел указанного DOM-узла на основе предоставленных параметров. ": {
    "prefix": "BX.findChild",
    "body": ["BX.findChild($node, $params, $recursive $get_all)"],
    "description": "Находит дочерний узел указанного DOM-узла на основе предоставленных параметров."
  },
  "Находит дочерние узлы указанного DOM-узла на основе предоставленных параметров.": {
    "prefix": "BX.findChildren+",
    "body": [
      "/**",
      " * Finds all direct child nodes of the specified DOMNode.",
      " *",
      " * @param {HTMLElement} node - The DOMNode to search for children.",
      " * @param {Object} [params] - An optional object containing parameters to filter the child nodes.\",",
      " * @param {string} [params.tagName] - The tag name of the desired child node.\",",
      " * @param {string} [params.className] - The class name of the desired child node.\",",
      " * @param {Object} [params.attribute] - An object containing attribute key-value pairs to filter the child nodes.\",",
      " * @param {Object} [params.property] - An object containing property key-value pairs to filter the child nodes.\",",
      " * @param {boolean} [recursive=false] - If true, also search for children of the children.",
      " * @returns {array<HTMLElement>} - An array of all direct child nodes.",
      " */",
      "BX.findChildren($node, $params, $recursive)"
    ],
    "description": "Находит дочерние узлы указанного DOM-узла на основе предоставленных параметров."
  },
  "Находит дочерние узлы указанного DOM-узла на основе предоставленных параметров. ": {
    "prefix": "BX.findChildren",
    "body": ["BX.findChildren($node, $params, $recursive)"],
    "description": "Находит дочерние узлы указанного DOM-узла на основе предоставленных параметров."
  },
  "Находит родительский элемент данного узла.": {
    "prefix": "BX.findParent+",
    "body": [
      "/**",
      " * Finds the parent element of the given node.",
      " *",
      " * @param {HTMLElement} node - The child element to find the parent of.",
      " * @param {?Object} [params] - Optional parameters to filter the parent.",
      " * @param {string} [params.tagName] - The desired tag name of the parent.",
      " * @param {string} [params.className] - The desired class name of the parent.",
      " * @param {Object} [params.attribute] - An object containing desired attributes of the parent.",
      " * @param {Object} [params.property] - An object containing desired properties of the parent.",
      " * @returns {HTMLElement} - The parent element that matches the given parameters, or the first parent if no parameters are provided.",
      " */",
      "BX.findParent($node, $params)"
    ],
    "description": "Находит родительский элемент данного узла."
  },
  "Находит родительский элемент данного узла. ": {
    "prefix": "BX.findParent",
    "body": ["BX.findParent($node, $params)"],
    "description": "Находит родительский элемент данного узла."
  },
  "Находит следующий ближайший элемент данного узла": {
    "prefix": "BX.findNextSibling+",
    "body": [
      "/**",
      " * Finds the next sibling element of the given node.",
      " *",
      " * @param {HTMLElement} node - The node to find the next sibling of.",
      " * @param {?Object} [params] - Optional parameters for customizing the search.",
      " * @param {string} [params.tagName] - The tag name of the desired sibling element.",
      " * @param {string} [params.className] - The class name of the desired sibling element.",
      " * @param {Object} [params.attribute] - An object containing key-value pairs of attribute-value pairs to match.",
      " * @param {Object} [params.property] - An object containing key-value pairs of property-value pairs to match.",
      " * @returns {HTMLElement} - The next sibling element that matches the given criteria, or null if no match is found.",
      " */",
      "BX.findNextSibling($node, $params)"
    ],
    "description": "Находит следующий ближайший элемент данного узла"
  },
  "Находит следующий ближайший элемент данного узла ": {
    "prefix": "BX.findNextSibling",
    "body": ["BX.findNextSibling($node, $params)"],
    "description": "Находит следующий ближайший элемент данного узла"
  },
  "Находит предыдущий ближайший элемент данного узла": {
    "prefix": "BX.findPreviousSibling+",
    "body": [
      "/**",
      " * Finds the next sibling element of the given node.",
      " *",
      " * @param {HTMLElement} node - The node to find the next sibling of.",
      " * @param {?Object} [params] - Optional parameters for customizing the search.",
      " * @param {string} [params.tagName] - The tag name of the desired sibling element.",
      " * @param {string} [params.className] - The class name of the desired sibling element.",
      " * @param {Object} [params.attribute] - An object containing key-value pairs of attribute-value pairs to match.",
      " * @param {Object} [params.property] - An object containing key-value pairs of property-value pairs to match.",
      " * @returns {HTMLElement} - The next sibling element that matches the given criteria, or null if no match is found.",
      " */",
      "BX.findPreviousSibling($node, $params)"
    ],
    "description": "Находит предыдущий ближайший элемент данного узла"
  },
  "Находит предыдущий ближайший элемент данного узла ": {
    "prefix": "BX.findPreviousSibling",
    "body": ["BX.findPreviousSibling($node, $params)"],
    "description": "Находит предыдущий ближайший элемент данного узла"
  },
  "Функция переключает наличие/отсутствие CSS-класса className у узла node или производит ротацию CSS-классов, если className – массив.": {
    "prefix": "BX.toggleClass+",
    "body": [
      "/**",
      " * Switches the specified class(s) in this node.",
      " *",
      " * @param {HTMLElement} node - node to which the class(s) will be switched.",
      " * @param {string|Array<String>} className - the class(s) that need to be switched. If an array is specified, 1 class will be replaced by 2.",
      " * @returns {void} - This method does not return any value.",
      "*/",
      "BX.toggleClass($node, $className)"
    ],
    "description": "Функция переключает наличие/отсутствие CSS-класса className у узла node или производит ротацию CSS-классов, если className – массив."
  },
  "Функция переключает наличие/отсутствие CSS-класса className у узла node или производит ротацию CSS-классов, если className – массив. ": {
    "prefix": "BX.toggleClass",
    "body": ["BX.toggleClass($node, $className)"],
    "description": "Функция переключает наличие/отсутствие CSS-класса className у узла node или производит ротацию CSS-классов, если className – массив."
  },
  "Вставляет указанный узел после указанного узла.": {
    "prefix": "BX.insertAfter+",
    "body": [
      "/**",
      " * Inserts the specified node after the specified destination node.",
      " *",
      " * @param {HTMLElement} node - The node to be inserted.",
      " * @param {HTMLElement} dstNode - The node after which the specified node should be inserted.",
      " */",
      "BX.insertAfter($node, $dstNode)"
    ],
    "description": "Вставляет указанный узел после указанного узла"
  },
  "Вставляет указанный узел после указанного узла. ": {
    "prefix": "BX.insertAfter",
    "body": ["BX.insertAfter($node, $dstNode)"],
    "description": "Вставляет указанный узел после указанного узла"
  },
  "Вставляет указанный узел в начало указанного узла.": {
    "prefix": "BX.prepend+",
    "body": [
      "/**",
      " * Prepends the specified node to the destination node.",
      " *",
      " * @param {HTMLElement} node - The node to be prepended.",
      " * @param {HTMLElement} dstNode - The destination node where the node will be prepended.",
      " */",
      "BX.prepend($node, $dstNode)"
    ],
    "description": "Вставляет указанный узел в начало указанного узла"
  },
  "Вставляет указанный узел в начало указанного узла. ": {
    "prefix": "BX.prepend",
    "body": ["BX.prepend($node, $dstNode)"],
    "description": "Вставляет указанный узел в начало указанного узла"
  },
  "Вставляет указанный узел в конец указанного узла.": {
    "prefix": "BX.append+",
    "body": [
      "/**",
      " * Appends a node to the end of another node.",
      " *",
      " * @param {HTMLElement} node - The node to be appended.",
      " * @param {HTMLElement} dstNode - The destination node where the node will be appended.",
      " */",
      "BX.append($node, $dstNode)"
    ],
    "description": "Вставляет указанный узел в конец указанного узла"
  },
  "Вставляет указанный узел в конец указанного узла. ": {
    "prefix": "BX.append",
    "body": ["BX.append($node, $dstNode)"],
    "description": "Вставляет указанный узел в конец указанного узла"
  },
  "Вставляет указанный узел перед указанным целевым узлом.": {
    "prefix": "BX.insertBefore+",
    "body": [
      "/**",
      " * Inserts the specified node before the specified destination node.",
      " *",
      " * @param {HTMLElement} node - The node to be inserted.",
      " * @param {HTMLElement} dstNode - The node before which the specified node will be inserted.",
      " */",
      "BX.insertBefore($node, $dstNode)"
    ],
    "description": "Вставляет указанный узел перед указанным целевым узлом."
  },
  "Вставляет указанный узел перед указанным целевым узлом. ": {
    "prefix": "BX.insertBefore",
    "body": ["BX.insertBefore($node, $dstNode)"],
    "description": "Вставляет указанный узел перед указанным целевым узлом."
  },
  "Функция обеспечивает доступ к языковым сообщениям.": {
    "prefix": "BX.message+",
    "body": [
      "/**",
      " * Function provides access to language messages. ",
      " * If the param parameter is a string, the language message with the identifier param will be returned. ",
      " * Otherwise, the parameter is interpreted as an object of the form {identifier: message, identifier: message}; ",
      " * language messages are added to the current ones (overwriting existing ones).",
      " *",
      " * @param {string|Object} param - The identifier or an object of language messages.",
      " * @returns {string} - The language message with the given identifier.",
      " * @example <caption>",
      " *",
      " * BX.message({test: 123}) //returns undefined",
      " *",
      " * BX.message('test') //returns 123",
      " * </caption>",
      " */",
      "BX.message($param)"
    ],
    "description": "Функция обеспечивает доступ к языковым сообщениям."
  },
  "Функция обеспечивает доступ к языковым сообщениям. ": {
    "prefix": "BX.message",
    "body": ["BX.message($param)"],
    "description": "Функция обеспечивает доступ к языковым сообщениям."
  }
}
